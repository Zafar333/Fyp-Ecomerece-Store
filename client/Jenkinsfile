pipeline {
    agent any
    
    environment{
         GIT_REPO="https://github.com/Zafar333/Fyp-Ecomerece-Store.git"
         FRONTEND_DIR="client"
        imageName="fypimage"
    }

    stages {
        // pull code from github code section is start from here
        stage('pull code') {
            steps {
                echo "echo 'Pulling code from GitHub..."
                git branch:"main", url:"${GIT_REPO}"
            }
            post{
                success{echo "code pull from github is success"}
                failure{echo "code pull from github is failure"}
                
            }
        }
        
        // pull code from github code section is end here
         
        
         
        
        
        
        // 
        // install dependencis code section is start from here
        // 
        stage("install dependenceis of project"){
            steps{
                echo "dependeceis installation is start"
                  dir("${FRONTEND_DIR}") {
                    sh 'npm install'
                }
                
            }
            post{success {echo "dependenceis install sucessfully"}
                failure{echo "depenceis installation is failed"}
            }
        } 
        
         // install dependencis code section is end from here
         
         
         
        
        //  // make build of project code section is start from here
        stage("make build of project"){
            steps{
                echo "build process is start"
                  dir("${FRONTEND_DIR}") {
                      sh '''set CI=false
                             npm run build'''
                }
                
            }
            post{
                success {echo "project build sucessfully"}
                failure{echo "project build is failed"}
            }
        }
        
         // make build of project code section is end here
         
         
        //  testing code section is start from here
        stage("testing phase"){
            steps{
                echo "testing is start"
                dir("${FRONTEND_DIR}"){
               echo "üß™ Running React tests with JUnit output..."
            //   sh 'npm install jest-junit --save-dev'
                 echo "Running tests and generating JUnit report..."
            
                // run tests and ensure they pass even if none found
                sh 'npm test -- --watchAll=false --passWithNoTests '
            
                }
            }
              post{
              
                //  always{ junit 'client/reports/junit/*.xml'} 
                success {echo "testing is done sucessfully"}
                failure{echo "testing is failed"}
            }
        }
        //  testing code section is end here
        
        
        // docker create image code section is start from here
        stage("create docker image"){
            steps{
                script{
                echo "docker create image is start"
                dir("${FRONTEND_DIR}"){
                        // Define image details
                     sh """
                    echo Building Docker image...
                    docker build -t ${imageName} .
                    """

                   echo "‚úÖ Docker image ${imageName} built successfully."
                }
                }
            }
        
             post{
             
                success {echo "docker image is created sucessfully"}
                failure{echo "testing is failed"}
            }
        }
        // docker create image code section is end here

    // image push section is start from here

            stage('Docker Build & Push') {
            // when {
            //     expression { currentBuild.currentResult == 'SUCCESS' }
            // }
            steps {
                script{
                echo "üê≥ Building Docker image..."
                    dir("${FRONTEND_DIR}"){
                
                echo "üöÄ Pushing image to Docker Hub..."
                 sh '''
                 // docker login -u <your-dockerhub-usernam -p <your-dockerhub-password>
                 docker login -u arslanz499 -p arslan
                 docker tag ${imageName} arslanz499/${imageName}
                 docker push arslanz499/${imageName}
                '''
                    }
                }
            }
            post {
                 success {
                    echo "Docker image push is success"
                }
                failure {
                    echo "‚ùå Docker image push failed"
                }
            }
        }

        
       // image push section is end here 

        //deploy stage section is start from here it is optional

         stage('Deploy') {
            steps {
                echo "üöÄ Deploying container..."
                sh '''
                    docker stop appcontainer || true
                    docker rm appcontainer || true
                    docker run -d -p 3000:80 --name newcontainer ${imageName}
                    // ssh user@yourserver "docker pull yourusername/alzire-app:v${BUILD_NUMBER} && docker stop app || true && docker rm app || true && docker run -d --name app -p 80:80 yourusername/alzire-app:v${BUILD_NUMBER}"
                '''
                echo "‚úÖ Application deployed successfully at http://<your-ec2-public-ip>:3000"
            }

             post {
                 success {
                    echo "your app is deploy successfully"
                }
                failure {
                    echo "‚ùå app deploy is failed"
                }
            }
        }
        //deploy stage section is and here it is optional

        // send gmail to your ceo your app is deploy section is startfrom here
        // send gmail to your ceo your app is deploy section is startfrom here
        
        
    }
        post {
        success {
            echo "üéâ Pipeline completed successfully!"
        }
        failure {
            echo 'Pipeline failed'
            emailext (
                subject: "‚ùå FAILURE: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                body: """
                    <h2>Build Failed</h2>
                    <p>Job: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p>Status: FAILED ‚ùå</p>
                    <p>Check console output: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                """,
                to: 'yourname@gmail.com'
            )
        }
    }
}

